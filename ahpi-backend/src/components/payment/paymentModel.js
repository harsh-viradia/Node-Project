const mongoose = require('mongoose');
const mongoosePaginate = require("mongoose-paginate-v2");
const idValidator = require("mongoose-id-validator");
const {Schema} = require("mongoose");
const {myCustomLabels} = require('../../configuration/common')

mongoosePaginate.paginate.options = {
    customLabels: myCustomLabels,
};

const schema = new mongoose.Schema({
    transNo: { type: String }, // generated by seriesGenerator
    userId: { type: Schema.Types.ObjectId, ref: 'user' },
    payTransId: { type: String },
    orderId: { type: Schema.Types.ObjectId, ref: 'order' },
    userEmail: { type: String }, // used userEmail instead of userNm(user name).
    transFee: {
        tax: { type: Number },
    },
    stsId: { type: Schema.Types.ObjectId, ref: 'master' },
    stsNm: { type: String },
    payType: { type: String }, // net banking, UPI, cards etc.
    type: { type: String }, // MID_TRANS
    res: { type: Object }, // api response
    remark: { type: String },
    amt: { type: Number },
    currency: { type: String },
    createdBy: {
        type: Schema.Types.ObjectId, ref: "user"
    },
    paytmSts: { type: String },
    deletedAt: { type: Date },
    deletedBy: { type: Schema.Types.ObjectId, ref: "user" },
}, { timestamps: true });

schema.pre(["findOne", "find"], function (next) {
    this.getQuery().deletedAt = { $exists: false };
    next();
  });
  
schema.plugin(mongoosePaginate);
schema.plugin(idValidator);

const transactions = mongoose.model('transactions', schema, "transactions");

module.exports = transactions
